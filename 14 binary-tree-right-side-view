question:- https://leetcode.com/problems/binary-tree-right-side-view/ (RECURSIVE APPROACH FOR THE SPACE COMPLEXITY OF O(H))
class Solution {
public:
    void recursiveCall(TreeNode* root,int level, vector<int>& ans){
        if(root==NULL) return;

        if(ans.size()==level) ans.push_back(root->val);
        recursiveCall(root->right, level+1, ans);
        recursiveCall(root->left, level+1, ans);
    }

    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        recursiveCall(root, 0, ans);
        return ans;
    }
};
// striver's tree playlist
// simple level order traversal logic
// 
// ITERATIVE APPROACH BUT SPACE COMPLEXITY IS O(N) AND TC IS O(N)
// vector<int> ans;
// if(root==NULL) return ans;
// queue<TreeNode*> q;
// q.push(root);
// while(!q.empty()){
//     int size=q.size();
//     for(int i=0; i<size; i++){
//         TreeNode* node=q.front();
//         q.pop();
//         if(i==size-1) ans.push_back(node->val);
//         if(node->left){
//             q.push(node->left);
//         }
//         if(node->right){
//             q.push(node->right);
//         }
//     }
// }
// return ans;
