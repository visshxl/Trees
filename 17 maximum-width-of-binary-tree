question:-https://leetcode.com/problems/maximum-width-of-binary-tree/
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if (!root) return 0; // Handling edge case
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        int widthMax=0;

        while (!q.empty()) {
            int size = q.size();
            int firstInd = q.front().second; // Initialize first index for current level
            int lastInd = 0; // Initialize last index for current level

            for (int i = 0; i < size; i++) {
                int currInd = q.front().second - firstInd; // Calculate relative index
                TreeNode* node = q.front().first;
                q.pop();

                lastInd = currInd; // Update last index

                if (node->left)
                    q.push({node->left, (long long)currInd * 2 + 1});
                if (node->right)
                    q.push({node->right, (long long)currInd * 2 + 2});
            }

            widthMax = max(widthMax, lastInd + 1); // Update maximum width
        }
        return widthMax;
    }
};
// striver's tree playlist
//`If you are getting runtime error while submiting the same code on leetcode,no need to worry,
just do a minute change in the code,just typecast the value of index while pushing in the queue.
You may ask since we applied a trick to tackle the integer overflow here,yes we did,but through
this method we just ensure that the index we push everytime just comes under INT_MAX,and index
difference is always under singed 32 bit ,i.e at max below 2^32 as stated in question itself. 
At everytime we are pushing (2*index+1) or (2*index+2),so its not exactly twice,its getting more
than that ,thats why we need to typecast with long long.Hope its clear now.`

